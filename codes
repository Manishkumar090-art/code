<!DOCTYPE html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8"> 
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>Library Management System</title> 
    <style> 
        /* Basic reset */ 
        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        } 
 
        /* Body and header styling */ 
        body { 
            font-family: Arial, sans-serif; 
            line-height: 1.6; 
            background: 
url('https://th.bing.com/th/id/R.efd35a6d841953060a0c4b10f763f08c?rik=CJ9NMgFci1tVmg&riu=http%3a
 %2f%2fgetwallpapers.com%2fwallpaper%2ffull%2ff%2f8%2f4%2f888661-beautiful-library-background
images-1920x1080
iphone.jpg&ehk=4sDpXGMv3dZdR6sK7WCIqhrxrVTpmPIyg8Nr3dm9nl0%3d&risl=&pid=ImgRaw&r=0') no
repeat center center fixed; 
            background-size: cover; 
            color: #fff; 
        } 
 
        header { 
            background: rgba(0, 0, 0, 0.7); 
            color: #fff; 
            padding: 1rem; 
            text-align: center; 
        } 
 
        h1 { 
            margin: 0; 
        } 
 
        /* Main section styling */ 
        main { 
            padding: 2rem; 
            text-align: center; 
            background: rgba(0, 0, 0, 0.5) 
url('https://th.bing.com/th/id/R.efd35a6d841953060a0c4b10f763f08c?rik=CJ9NMgFci1tVmg&riu=http%3a
 %2f%2fgetwallpapers.com%2fwallpaper%2ffull%2ff%2f8%2f4%2f888661-beautiful-library-background
images-1920x1080
iphone.jpg&ehk=4sDpXGMv3dZdR6sK7WCIqhrxrVTpmPIyg8Nr3dm9nl0%3d&risl=&pid=ImgRaw&r=0') no
repeat center center; 
            background-size: cover; 
            border-radius: 10px; 
        } 
 
        #search-section { 
            margin-bottom: 2rem; 
        } 
 
        input[type="text"] { 
            padding: 0.5rem; 
            width: 300px; 
            margin-right: 10px; 
            border: none; 
            border-radius: 5px; 
            background: #fff; 
            color: #333; 
        } 
 
        button { 
            padding: 0.5rem 1rem; 
            background-color: #333; 
            color: #fff; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            transition: background-color 0.3s ease; 
        } 
 
        button:hover { 
            background-color: #555; 
        } 
 
        /* Chatbot styling */ 
        #chatbot { 
            position: fixed; 
            bottom: 0; 
            right: 0; 
            width: 320px; 
            background: rgba(0, 0, 0, 0.8); 
            color: #fff; 
            border-radius: 10px 0 0 0; 
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); 
            animation: slideIn 0.5s ease; 
        } 
 
        #chatbot-header { 
            padding: 10px; 
            background: #007bff; 
            color: #fff; 
            border-radius: 10px 10px 0 0; 
            display: flex; 
            align-items: center; 
            font-weight: bold; 
        } 
 
        #chatbot-header span { 
            margin-left: 10px; 
        } 
 
        #chatbox { 
            padding: 10px; 
            display: flex; 
            flex-direction: column; 
            height: 400px; 
            overflow: hidden; 
            animation: fadeIn 1s ease; 
        } 
 
        #messages { 
            flex: 1; 
            overflow-y: auto; 
            margin-bottom: 10px; 
            animation: fadeIn 1s ease; 
        } 
 
        #user-input { 
            padding: 10px; 
            border: none; 
            border-radius: 5px 0 0 5px; 
            width: calc(100% - 80px); 
            margin-right: 10px; 
            background: #fff; 
            color: #333; 
        } 
 
        button#send-button { 
            border-radius: 0 5px 5px 0; 
            width: 70px; 
            background: #007bff; 
            transition: background-color 0.3s ease; 
        } 
 
        button#send-button:hover { 
            background-color: #0056b3; 
        } 
 
        /* Animations */ 
        @keyframes slideIn { 
            from { 
                transform: translateY(100%); 
            } 
            to { 
                transform: translateY(0); 
            } 
        } 
 
        @keyframes fadeIn { 
            from { 
                opacity: 0; 
            } 
            to { 
                opacity: 1; 
            } 
        } 
 
        /* Issuing and Returning Section */ 
        #issue-section, #return-section { 
            margin-top: 2rem; 
            text-align: center; 
        } 
 
        input[type="text"].issue-input, input[type="text"].return-input { 
            width: 150px; 
            margin-right: 10px; 
        } 
 
        .record { 
            margin-top: 1rem; 
            background: rgba(0, 0, 0, 0.7); 
            padding: 1rem; 
            border-radius: 5px; 
            color: #fff; 
            animation: fadeIn 1s ease; 
        } 
 
        .record ul { 
            list-style: none; 
        } 
 
        .record li { 
            margin-bottom: 0.5rem; 
        } 
    </style> 
</head> 
<body> 
    <header> 
        <h1>Library Management System</h1> 
    </header> 
     
    <main> 
        <section id="search-section"> 
            <h2>Search for a Book</h2> 
            <input type="text" id="book-search" placeholder="Enter book title"> 
            <button onclick="searchBook()">Search</button> 
            <p id="search-result"></p> 
        </section> 
 
        <section id="issue-section"> 
            <h2>Issue a Book</h2> 
            <input type="text" id="issue-book-title" class="issue-input" placeholder="Book Title"> 
            <input type="text" id="issue-user-name" class="issue-input" placeholder="Your Name"> 
            <button onclick="issueBook()">Issue Book</button> 
            <div id="record-section" class="record"> 
                <h3>Issued Books:</h3> 
                <ul id="issued-books-list"></ul> 
            </div> 
        </section> 
 
        <section id="return-section"> 
            <h2>Return a Book</h2> 
            <input type="text" id="return-book-title" class="return-input" placeholder="Book Title"> 
            <input type="text" id="return-user-name" class="return-input" placeholder="Your Name"> 
            <button onclick="returnBook()">Return Book</button> 
        </section> 
    </main> 
 
    <div id="chatbot"> 
        <div id="chatbot-header"> 
            Libraria            
        </div> 
        <div id="chatbox"> 
            <div id="messages"></div> 
            <input type="text" id="user-input" placeholder="Ask me about book availability..."> 
            <button id="send-button" onclick="sendMessage()">Send</button> 
        </div> 
    </div> 
 
    <script> 
        // Sample data for books 
        const books = [ 
            { title: 'The Great Gatsby', available: 3 }, 
            { title: '1984', available: 0 }, 
            { title: 'To Kill a Mockingbird', available: 5 }, 
            { title: 'Moby Dick', available: 2 }, 
            { title: 'Pride and Prejudice', available: 4 }, 
            { title: 'The Catcher in the Rye', available: 1 }, 
            { title: 'The Hobbit', available: 0 }, 
            { title: 'Brave New World', available: 6 }, 
            { title: 'The Lord of the Rings', available: 3 }, 
            { title: 'Fahrenheit 451', available: 2 }, 
            { title: 'Jane Eyre', available: 5 }, 
            { title: 'Animal Farm', available: 4 }, 
            { title: 'Wuthering Heights', available: 0 }, 
            { title: 'The Chronicles of Narnia', available: 7 }, 
            { title: 'Les Mis√©rables', available: 3 }, 
            { title: 'The Picture of Dorian Gray', available: 1 }, 
            { title: 'Gone with the Wind', available: 2 }, 
            { title: 'Catch-22', available: 4 }, 
            { title: 'The Odyssey', available: 3 }, 
            { title: 'Little Women', available: 6 }, 
            { title: 'Dracula', available: 2 }, 
            { title: 'Frankenstein', available: 1 }, 
            { title: 'Crime and Punishment', available: 5 }, 
            { title: 'The Count of Monte Cristo', available: 3 }, 
            { title: 'The Brothers Karamazov', available: 0 }, 
            { title: 'The Bell Jar', available: 2 }, 
            { title: 'A Tale of Two Cities', available: 6 }, 
            { title: 'One Hundred Years of Solitude', available: 0 }, 
            { title: 'The Road', available: 4 }, 
            { title: 'Slaughterhouse-Five', available: 3 }, 
            { title: 'The Goldfinch', available: 1 }, 
            { title: 'Life of Pi', available: 5 }, 
            { title: 'The Shining', available: 2 }, 
            { title: 'The Giver', available: 0 }, 
            { title: 'The Maze Runner', available: 4 }, 
            { title: 'The Da Vinci Code', available: 3 }, 
            { title: 'Angels & Demons', available: 1 }, 
            { title: 'The Alchemist', available: 6 }, 
            { title: 'The Girl with the Dragon Tattoo', available: 5 }, 
            { title: 'The Hunger Games', available: 0 }, 
            { title: 'Divergent', available: 7 }, 
            { title: 'The Handmaid\'s Tale', available: 4 }, 
            { title: 'The Kite Runner', available: 1 }, 
            { title: 'Shantaram', available: 3 }, 
            { title: 'The Silent Patient', available: 5 }, 
            { title: 'Where the Crawdads Sing', available: 0 }, 
            { title: 'Big Little Lies', available: 2 }, 
            { title: 'The Immortal Life of Henrietta Lacks', available: 4 }, 
            { title: 'Educated', available: 0 }, 
            { title: 'Becoming', available: 6 }, 
            { title: 'Born a Crime', available: 2 }, 
            { title: 'The Subtle Art of Not Giving a F*ck', available: 1 }, 
            { title: 'Atomic Habits', available: 4 }, 
            { title: 'Sapiens', available: 3 }, 
            { title: 'Homo Deus', available: 0 }, 
            { title: '21 Lessons for the 21st Century', available: 5 }, 
            { title: 'Grit', available: 4 }, 
            { title: 'Outliers', available: 0 }, 
            { title: 'Thinking, Fast and Slow', available: 6 }, 
            { title: 'The Power of Habit', available: 2 }, 
            { title: 'Deep Work', available: 1 }, 
            { title: 'Quiet', available: 3 }, 
            { title: 'Start with Why', available: 5 }, 
            { title: 'Daring Greatly', available: 0 }, 
            { title: 'The Lean Startup', available: 4 }, 
            { title: 'Good to Great', available: 3 }, 
            { title: 'The 7 Habits of Highly Effective People', available: 0 }, 
            { title: 'Rich Dad Poor Dad', available: 7 }, 
            { title: 'The Intelligent Investor', available: 5 }, 
            { title: 'Principles', available: 0 }, 
            { title: 'Thinking in Bets', available: 4 }, 
            { title: 'The Psychology of Money', available: 3 }, 
            { title: 'Your Money or Your Life', available: 0 }, 
            { title: 'The Millionaire Next Door', available: 2 }, 
            { title: 'The Barefoot Investor', available: 3 }, 
            { title: 'The Art of Happiness', available: 1 }, 
            { title: 'The Four Agreements', available: 6 }, 
            { title: 'The Untethered Soul', available: 4 }, 
            { title: 'The Alchemist', available: 0 } 
        ]; 
 
        // Array to keep track of issued books 
        const issuedBooks = []; 
 
        // Function to search for a book 
        function searchBook() { 
            const searchTerm = document.getElementById('book-search').value.toLowerCase(); 
            const result = books.find(book => book.title.toLowerCase() === searchTerm); 
            const message = result  
                ? `The book is ${result.available > 0 ? 'available' : 'not available'}. Copies available: 
${result.available}.` 
                : 'Book not found.'; 
 
            const searchResult = document.getElementById('search-result'); 
            searchResult.textContent = message; 
            searchResult.style.animation = 'fadeIn 1s ease'; 
        } 
 
        // Function to issue a book 
        function issueBook() { 
            const bookTitle = document.getElementById('issue-book-title').value.trim(); 
            const userName = document.getElementById('issue-user-name').value.trim(); 
            const book = books.find(b => b.title.toLowerCase() === bookTitle.toLowerCase()); 
 
            if (book && book.available > 0) { 
                book.available--; 
                const issueDate = new Date().toLocaleDateString(); 
                issuedBooks.push({ bookTitle, userName, issueDate }); 
                 
                document.getElementById('issued-books-list').innerHTML = issuedBooks.map(record =>  
                    `<li><strong>Book:</strong> ${record.bookTitle}, <strong>User:</strong> ${record.userName}, 
<strong>Date:</strong> ${record.issueDate}</li>` 
                ).join(''); 
 
                document.getElementById('issue-book-title').value = ''; 
                document.getElementById('issue-user-name').value = ''; 
                searchBook(); // Update availability status 
            } else { 
                alert('Book not available or not found.'); 
            } 
        } 
 
        // Function to return a book 
        function returnBook() { 
            const bookTitle = document.getElementById('return-book-title').value.trim(); 
            const userName = document.getElementById('return-user-name').value.trim(); 
            const book = books.find(b => b.title.toLowerCase() === bookTitle.toLowerCase()); 
 
            if (book) { 
                // Remove the book from the issuedBooks array 
                const index = issuedBooks.findIndex(record => record.bookTitle.toLowerCase() === 
bookTitle.toLowerCase() && record.userName.toLowerCase() === userName.toLowerCase()); 
                if (index !== -1) { 
                    issuedBooks.splice(index, 1); 
                    book.available++; 
                     
                    document.getElementById('issued-books-list').innerHTML = issuedBooks.map(record =>  
                        `<li><strong>Book:</strong> ${record.bookTitle}, <strong>User:</strong> 
${record.userName}, <strong>Date:</strong> ${record.issueDate}</li>` 
                    ).join(''); 
 
                    document.getElementById('return-book-title').value = ''; 
                    document.getElementById('return-user-name').value = ''; 
                    searchBook(); // Update availability status 
                } else { 
                    alert('No record found for this book and user.'); 
                } 
            } else { 
                alert('Book not found.'); 
            } 
        } 
 
        // Function to handle chatbot messages 
        async function sendMessage() { 
            const userInput = document.getElementById('user-input').value.trim(); 
            if (userInput === '') return; 
 
            const messages = document.getElementById('messages'); 
            messages.innerHTML += `<div><strong>You:</strong> ${userInput}</div>`; 
            messages.style.animation = 'fadeIn 1s ease'; 
 
            // Call OpenAI API 
            const response = await fetch('https://api.openai.com/v1/completions', { 
                method: 'POST', 
                headers: { 
                    'Content-Type': 'application/json', 
                    'Authorization': `Bearer YOUR_OPENAI_API_KEY` 
                }, 
                body: JSON.stringify({ 
                    model: 'text-davinci-003', 
                    prompt: `The user asked: "${userInput}". How should I respond?`, 
                    max_tokens: 150 
                }) 
            }); 
 
            const data = await response.json(); 
            const botReply = data.choices[0].text.trim(); 
 
            messages.innerHTML += `<div><strong>Bot:</strong> ${botReply}</div>`; 
            messages.style.animation = 'fadeIn 1s ease'; 
document.getElementById('user-input').value = ''; 
// Scroll to the bottom of the chatbox 
messages.scrollTop = messages.scrollHeight; 
} 
</script> 
</body> 
</htm
